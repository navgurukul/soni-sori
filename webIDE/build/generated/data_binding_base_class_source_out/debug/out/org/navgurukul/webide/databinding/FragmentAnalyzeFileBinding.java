// Generated by view binder compiler. Do not edit!
package org.navgurukul.webide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.mikephil.charting.charts.PieChart;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.navgurukul.webide.R;

public final class FragmentAnalyzeFileBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button countText;

  @NonNull
  public final PieChart pieChart;

  @NonNull
  public final Button sizeText;

  @NonNull
  public final SwitchCompat switchFile;

  private FragmentAnalyzeFileBinding(@NonNull RelativeLayout rootView, @NonNull Button countText,
      @NonNull PieChart pieChart, @NonNull Button sizeText, @NonNull SwitchCompat switchFile) {
    this.rootView = rootView;
    this.countText = countText;
    this.pieChart = pieChart;
    this.sizeText = sizeText;
    this.switchFile = switchFile;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAnalyzeFileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAnalyzeFileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_analyze_file, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAnalyzeFileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.countText;
      Button countText = ViewBindings.findChildViewById(rootView, id);
      if (countText == null) {
        break missingId;
      }

      id = R.id.pieChart;
      PieChart pieChart = ViewBindings.findChildViewById(rootView, id);
      if (pieChart == null) {
        break missingId;
      }

      id = R.id.sizeText;
      Button sizeText = ViewBindings.findChildViewById(rootView, id);
      if (sizeText == null) {
        break missingId;
      }

      id = R.id.switchFile;
      SwitchCompat switchFile = ViewBindings.findChildViewById(rootView, id);
      if (switchFile == null) {
        break missingId;
      }

      return new FragmentAnalyzeFileBinding((RelativeLayout) rootView, countText, pieChart,
          sizeText, switchFile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
