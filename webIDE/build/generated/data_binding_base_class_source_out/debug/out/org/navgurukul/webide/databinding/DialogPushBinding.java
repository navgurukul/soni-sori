// Generated by view binder compiler. Do not edit!
package org.navgurukul.webide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.navgurukul.webide.R;

public final class DialogPushBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox dryRun;

  @NonNull
  public final CheckBox force;

  @NonNull
  public final TextInputEditText pushPassword;

  @NonNull
  public final Spinner pushSpinner;

  @NonNull
  public final TextInputEditText pushUsername;

  @NonNull
  public final CheckBox tags;

  @NonNull
  public final CheckBox thin;

  private DialogPushBinding(@NonNull LinearLayout rootView, @NonNull CheckBox dryRun,
      @NonNull CheckBox force, @NonNull TextInputEditText pushPassword,
      @NonNull Spinner pushSpinner, @NonNull TextInputEditText pushUsername, @NonNull CheckBox tags,
      @NonNull CheckBox thin) {
    this.rootView = rootView;
    this.dryRun = dryRun;
    this.force = force;
    this.pushPassword = pushPassword;
    this.pushSpinner = pushSpinner;
    this.pushUsername = pushUsername;
    this.tags = tags;
    this.thin = thin;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPushBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPushBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_push, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPushBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dryRun;
      CheckBox dryRun = ViewBindings.findChildViewById(rootView, id);
      if (dryRun == null) {
        break missingId;
      }

      id = R.id.force;
      CheckBox force = ViewBindings.findChildViewById(rootView, id);
      if (force == null) {
        break missingId;
      }

      id = R.id.pushPassword;
      TextInputEditText pushPassword = ViewBindings.findChildViewById(rootView, id);
      if (pushPassword == null) {
        break missingId;
      }

      id = R.id.pushSpinner;
      Spinner pushSpinner = ViewBindings.findChildViewById(rootView, id);
      if (pushSpinner == null) {
        break missingId;
      }

      id = R.id.pushUsername;
      TextInputEditText pushUsername = ViewBindings.findChildViewById(rootView, id);
      if (pushUsername == null) {
        break missingId;
      }

      id = R.id.tags;
      CheckBox tags = ViewBindings.findChildViewById(rootView, id);
      if (tags == null) {
        break missingId;
      }

      id = R.id.thin;
      CheckBox thin = ViewBindings.findChildViewById(rootView, id);
      if (thin == null) {
        break missingId;
      }

      return new DialogPushBinding((LinearLayout) rootView, dryRun, force, pushPassword,
          pushSpinner, pushUsername, tags, thin);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
